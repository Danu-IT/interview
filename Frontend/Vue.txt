		Vue - фреймворк который пропагандирует компонентный подход.
    Инструменты: Vue-devtools - можем отследить дерево компонентов
    Снипет: vbase - для получения структуры компонента

СОДЕРЖАНИЕ:

1) Создание проекта(Single page application).
2) Реактивность.
3) Компонент.
3.1) Однофайловые компоненты(single file components).
4) Поля компонента(data, methods).
5) Интерполяция.
6) Директивы.
7) Двустороннее связывание.
8) Стандартное поведение браузера на submit в vue.
9) Подключение и регистрация компонента.
10) Передача и получение props.
11) Передача данных из дочернего в родительский компонент.


1)  Чтоб начать разработку мы импортируем из Vue createApp и с помощью него создаем экземпляр приложения,
    параметром в эту функцию передаем корневой компонент, условно это будет считатся точкой входа в приложение и
    далее с помощью метода mount показываем куда наше приложение по итогу монтировать, для этого создадим корневой
    div в index.html и передадим id в метод mount.

2)  Реактивность - синхронизация между данными и событиями, это способ автоматически обновлять систему в зависимости
    от изменений потока данных, например кнопке добавить слушатель события и присвоить функцию которая изменят данные
    в data по каждому клику.

3)  Компонент - это js объект который строится особым образом, компоненты  имеют в себе поля data(){}, methods: {} и ...
3.1) Однофайловый компонент который имеет 3(template, script, style) секции который в дальнейшем описывают этот компонент:
        template - добавление разметки в компонент.
        script - добавление логики в компонент, в этой секции по дефолту должны экспортировать объект.
        style - добавление стилей в компонент, указывается флаг scoped для отрисовки только этого компонента.
     Обычно логика однофайловых компонентов не создается вместе с компонентом, а берется от родительского компонента
     таким образом дочерний компонент может получить от родителя какие-то входные значения, props(10).

4)  Поля(свойства):
        data - должна быть функцией в компоненте, нужен для хранения и реактивного изменения данных.
        methods - объявления функций, c помощью this можно получить доступ к данным из data.

5)  Для того чтобы данные(модели) из поля data вставить в шаблон существует такой синтаксис как - ИНТЕРПОЛЯЦИЯ {{}}

6)  Атрибуты начинающиеся с v- в контексте vue называются ДИРЕКТИВАМИ которые можно вносить в шаблоны template:
        - v-on:click="функция", @click="функция" - слушатель события клик;

        - v-for="элемент массива in сам массив" - цикл, который указывается у родительского элемента, для
        добавления в определенный шаблон данных из массива(позволяет реализовать динамический вывод какого-то списка из массива).

        - v-bind:'значение атрибута тэга куда было введено что-то пользователем'='одно из данных компонента', - что будет находится
         в данных компонента, то и будет находится в поле ввода, но наоборот это работать не будет(альтернативная запись без v-bind).

        - @input="функция" - мы можем отследить что пользователь написал в input через функцию которой передается event.target.

        - v-model='одно из данных компонента' - лучший способ совершить двустороннее связывание.

7)  Двустороннее связывание не саблюдено, когда есть рассинхрон между, например: данными в нашей компоненте и между тем,
    что ввел пользователь в input, задача двустороннего связывания избежать данного рассинхрона и создать связь между input
    и данными в компоненте, чтоб при изменении значений данные автоматически перезаписывались:
        1) Первый способ на примере с input:
           v-bind:'value'='title'
           @input="title = $event.target.value" - использую зарезервированное слово $event мы получаем что ввел пользователь в input
           и присваеваем значение title.
        2) Второй способ на примере с input(Лучший):
           v-model='title'
      Примечания:
           * input,textarea = value
           * checkbox,radio = checked
           * списки = value
        2)

8)  Стандартное поведение браузера на submit в vue - чтоб отменить работу браузера по умолчанию для form нужно применить модификатор
    @submit.prevent.

9)  Для работы с новым созданным компонентом, его стоит (1)подключить где нужно проводить с ним работу и (2)зарегестрировать:
        1) С помощью import мы подключаем в секции script, перед экспортом объекта, новый компонент.
        2) В самом экпортируемом объекте в свойстве components введем названия этих компонентов и тем самым их зарегестрируем.
    Примечания:
        * Компонент принято называть максимум двумя словами.

10) Обычно дочернему компоненте нужно получить какие-то данные из родительского, для этого используется подход с props:
        1) В дочерний компонент куда хотим получить данные, в експортируемый объект прописываем свойство props, во внутрь
           кладем, что ожидаем(аргумент), и в его теле прописываем(type, required);
        2) В родительском компоненте откуда хотим отправить данные(props), добавим в новый компонент который добавлен в размету,
           атрибут v-bind и передадим props.
           v-bind:название аргумента, который получит дочерний компонент = "данные из нашего компонента"
    Примечания:
        * Пропсы нельзя изменять в дочеренем компоненте.

11) Очень часто нужно передавать данные из дочернего в родительский компонент:
       1) Мы должны в дочернем компоненте сгенерировать новое событие.
               this.$emit('название события', this.post);
       2) Из родительского компонента мы можем подписаться на это событие (как на click) и присвоить это событие функции, которая в аргументе 
       получит передаваемый элемент.